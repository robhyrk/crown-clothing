{"ast":null,"code":"import { compose, createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // import logger from 'redux-logger';\n\nimport { rootReducer } from './root-reducer';\n\nconst loggerMiddleware = store => next => action => {\n  if (!action.type) {\n    return next(action);\n  }\n\n  console.log('type: ', action.type);\n  console.log('payload: ', action.payload);\n  console.log('currentState: ', store.getState());\n  next(action);\n  console.log('next state: ', store.getState());\n};\n\nconst middleWares = [loggerMiddleware];\nconst persistConfig = {\n  key: 'root',\n  storage,\n  blacklist: ['user']\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nconst composedEnhancers = compose(applyMiddleware(...middleWares));\nexport const store = createStore(persistedReducer, undefined, composedEnhancers);\nexport const persistor = persistStore(store);","map":{"version":3,"sources":["/Users/robhyrk/Documents/dev/courses/crwn-clothing-v2/src/store/store.js"],"names":["compose","createStore","applyMiddleware","persistStore","persistReducer","storage","rootReducer","loggerMiddleware","store","next","action","type","console","log","payload","getState","middleWares","persistConfig","key","blacklist","persistedReducer","composedEnhancers","undefined","persistor"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CACA;;AAEA,SAASC,WAAT,QAA4B,gBAA5B;;AAEA,MAAMC,gBAAgB,GAAIC,KAAD,IAAYC,IAAD,IAAWC,MAAD,IAAY;AACxD,MAAI,CAACA,MAAM,CAACC,IAAZ,EAAkB;AAChB,WAAOF,IAAI,CAACC,MAAD,CAAX;AACD;;AAEDE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,MAAM,CAACC,IAA7B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,MAAM,CAACI,OAAhC;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BL,KAAK,CAACO,QAAN,EAA9B;AAEAN,EAAAA,IAAI,CAACC,MAAD,CAAJ;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,KAAK,CAACO,QAAN,EAA5B;AACD,CAZD;;AAcA,MAAMC,WAAW,GAAG,CAACT,gBAAD,CAApB;AAEA,MAAMU,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,MADe;AAEpBb,EAAAA,OAFoB;AAGpBc,EAAAA,SAAS,EAAE,CAAC,MAAD;AAHS,CAAtB;AAMA,MAAMC,gBAAgB,GAAGhB,cAAc,CAACa,aAAD,EAAgBX,WAAhB,CAAvC;AAEA,MAAMe,iBAAiB,GAAGrB,OAAO,CAACE,eAAe,CAAC,GAAGc,WAAJ,CAAhB,CAAjC;AAEA,OAAO,MAAMR,KAAK,GAAGP,WAAW,CAC9BmB,gBAD8B,EAE9BE,SAF8B,EAG9BD,iBAH8B,CAAzB;AAMP,OAAO,MAAME,SAAS,GAAGpB,YAAY,CAACK,KAAD,CAA9B","sourcesContent":["import { compose, createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n// import logger from 'redux-logger';\n\nimport { rootReducer } from './root-reducer';\n\nconst loggerMiddleware = (store) => (next) => (action) => {\n  if (!action.type) {\n    return next(action);\n  }\n\n  console.log('type: ', action.type);\n  console.log('payload: ', action.payload);\n  console.log('currentState: ', store.getState());\n\n  next(action);\n\n  console.log('next state: ', store.getState());\n};\n\nconst middleWares = [loggerMiddleware];\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  blacklist: ['user'],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst composedEnhancers = compose(applyMiddleware(...middleWares));\n\nexport const store = createStore(\n  persistedReducer,\n  undefined,\n  composedEnhancers\n);\n\nexport const persistor = persistStore(store);"]},"metadata":{},"sourceType":"module"}