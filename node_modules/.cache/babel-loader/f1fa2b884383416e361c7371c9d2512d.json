{"ast":null,"code":"var _jsxFileName = \"/Users/robhyrk/Documents/dev/courses/crwn-clothing-v2/src/context/cart.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst addCartItem = (cartItems, productToAdd) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === productToAdd.id);\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === productToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  }\n\n  return [...cartItems, { ...productToAdd,\n    quantity: 1\n  }];\n};\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id);\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  }\n\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n};\n\nconst clearCartItem = (cartItems, cartItemToClear) => cartItems.filter(cartItem => cartItem.id !== cartItemToClear.id);\n\nconst CART_ACTION_TYPES = {\n  TOGGLE_CART: 'TOGGLE_CART',\n  SET_CART_ITEMS: 'SET_CART_ITEMS'\n};\n\nconst cartReducer = (state, action) => {\n  const {\n    type,\n    payload\n  } = action;\n  console.log(action);\n\n  switch (type) {\n    case 'TOGGLE_CART':\n      return { ...state,\n        isCartOpen: payload\n      };\n\n    case 'SET_CART_ITEMS':\n      return { ...state,\n        cartItems: payload.newCartItems,\n        cartCount: payload.newCartCount,\n        total: payload.newCartTotal\n      };\n\n    default:\n      throw new Error(`Unhandled type ${type} in cartReducer`);\n  }\n};\n\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  addItemToCart: () => {},\n  removeItemFromCart: () => {},\n  clearItemFromCart: () => {},\n  cartCount: 0,\n  total: 0\n});\nconst INITIAL_STATE = {\n  isCartOpen: false,\n  cartItems: [],\n  cartCount: 0,\n  total: 0\n};\nexport const CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [{\n    isCartOpen,\n    total\n  }, dispatch] = useReducer(cartReducer, INITIAL_STATE); // const [isCartOpen, setIsCartOpen] = useState(false)\n\n  const [cartItems, setCartItems] = useState([]);\n  const [cartCount, setCartCount] = useState(0);\n  const [cartTotal, setCartTotal] = useState(0);\n\n  const setIsCartOpen = () => {\n    dispatch({\n      type: CART_ACTION_TYPES.TOGGLE_CART,\n      payload: !isCartOpen\n    });\n  };\n\n  const updateCartItems = newCartItems => {\n    const newCartCount = cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0);\n    const newCartTotal = cartItems.reduce((total, cartItem) => total + cartItem.quantity * cartItem.price, 0);\n    const payload = {\n      newCartItems,\n      newCartCount,\n      newCartTotal\n    };\n    dispatch({\n      type: CART_ACTION_TYPES.SET_CART_ITEMS,\n      payload: payload\n    });\n  }; // useEffect(() => {\n  //   const newCartCount = cartItems.reduce((total, cartItem) => total + cartItem.quantity,0)\n  //   setCartCount(newCartCount)\n  // }, [cartItems])\n  // useEffect(() => {\n  //     const newCartTotal = cartItems.reduce((total, cartItem) => total + cartItem.quantity * cartItem.price, 0)\n  //     setCartTotal(newCartTotal)\n  //   }, [cartItems])\n\n\n  const addItemToCart = productToAdd => {\n    updateCartItems(addCartItem(cartItems, productToAdd));\n  };\n\n  const removeItemFromCart = cartItemToRemove => {\n    updateCartItems(removeCartItem(cartItems, cartItemToRemove));\n  };\n\n  const clearItemFromCart = cartItemToClear => {\n    updateCartItems(clearCartItem(cartItems, cartItemToClear));\n  };\n\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    addItemToCart,\n    cartItems,\n    cartCount,\n    removeItemFromCart,\n    clearItemFromCart,\n    cartTotal\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CartProvider, \"tJAPNngN2TuiIT02ndSUHpQwaZk=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/robhyrk/Documents/dev/courses/crwn-clothing-v2/src/context/cart.context.jsx"],"names":["createContext","useState","useEffect","useReducer","addCartItem","cartItems","productToAdd","existingCartItem","find","cartItem","id","map","quantity","removeCartItem","cartItemToRemove","filter","clearCartItem","cartItemToClear","CART_ACTION_TYPES","TOGGLE_CART","SET_CART_ITEMS","cartReducer","state","action","type","payload","console","log","isCartOpen","newCartItems","cartCount","newCartCount","total","newCartTotal","Error","CartContext","setIsCartOpen","addItemToCart","removeItemFromCart","clearItemFromCart","INITIAL_STATE","CartProvider","children","dispatch","setCartItems","setCartCount","cartTotal","setCartTotal","updateCartItems","reduce","price","value"],"mappings":";;;AAAA,SAAQA,aAAR,EAAuBC,QAAvB,EAAiCC,SAAjC,EAA4CC,UAA5C,QAA6D,OAA7D;;;AAEA,MAAMC,WAAW,GAAG,CAACC,SAAD,EAAYC,YAAZ,KAA6B;AAC7C,QAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CAAgBC,QAAD,IAAaA,QAAQ,CAACC,EAAT,KAAgBJ,YAAY,CAACI,EAAzD,CAAzB;;AAEA,MAAGH,gBAAH,EAAqB;AACjB,WAAOF,SAAS,CAACM,GAAV,CAAeF,QAAD,IAAaA,QAAQ,CAACC,EAAT,KAAgBJ,YAAY,CAACI,EAA7B,GAC9B,EAAC,GAAGD,QAAJ;AAAcG,MAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA5C,KAD8B,GAE5BH,QAFC,CAAP;AAIH;;AAED,SAAO,CAAC,GAAGJ,SAAJ,EAAe,EAAC,GAAGC,YAAJ;AAAkBM,IAAAA,QAAQ,EAAE;AAA5B,GAAf,CAAP;AACH,CAXD;;AAaA,MAAMC,cAAc,GAAG,CAACR,SAAD,EAAYS,gBAAZ,KAAiC;AACpD,QAAMP,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CAAgBC,QAAD,IAAaA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAA7D,CAAzB;;AAEA,MAAGH,gBAAgB,CAACK,QAAjB,KAA8B,CAAjC,EAAmC;AAC/B,WAAOP,SAAS,CAACU,MAAV,CAAiBN,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAA9D,CAAP;AACH;;AAED,SAAOL,SAAS,CAACM,GAAV,CAAeF,QAAD,IACjBA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAAjC,GACA,EAAC,GAAGD,QAAJ;AAAcG,IAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA5C,GADA,GAEEH,QAHC,CAAP;AAKH,CAZD;;AAcA,MAAMO,aAAa,GAAG,CAACX,SAAD,EAAYY,eAAZ,KAAgCZ,SAAS,CAACU,MAAV,CAAiBN,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBO,eAAe,CAACP,EAA7D,CAAtD;;AAEA,MAAMQ,iBAAiB,GAAG;AACtBC,EAAAA,WAAW,EAAE,aADS;AAEtBC,EAAAA,cAAc,EAAE;AAFM,CAA1B;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBF,MAAxB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;;AACA,UAAOC,IAAP;AACI,SAAK,aAAL;AACI,aAAO,EACH,GAAGF,KADA;AACOM,QAAAA,UAAU,EAAEH;AADnB,OAAP;;AAGJ,SAAK,gBAAL;AACI,aAAO,EACH,GAAGH,KADA;AAEHjB,QAAAA,SAAS,EAAEoB,OAAO,CAACI,YAFhB;AAGHC,QAAAA,SAAS,EAAGL,OAAO,CAACM,YAHjB;AAIHC,QAAAA,KAAK,EAAEP,OAAO,CAACQ;AAJZ,OAAP;;AAMJ;AACI,YAAM,IAAIC,KAAJ,CAAW,kBAAiBV,IAAK,iBAAjC,CAAN;AAbR;AAeH,CAlBD;;AAoBA,OAAO,MAAMW,WAAW,gBAAGnC,aAAa,CAAC;AACrC4B,EAAAA,UAAU,EAAE,KADyB;AAErCQ,EAAAA,aAAa,EAAE,MAAM,CAAE,CAFc;AAGrC/B,EAAAA,SAAS,EAAE,EAH0B;AAIrCgC,EAAAA,aAAa,EAAE,MAAM,CAAE,CAJc;AAKrCC,EAAAA,kBAAkB,EAAE,MAAM,CAAE,CALS;AAMrCC,EAAAA,iBAAiB,EAAE,MAAM,CAAE,CANU;AAOrCT,EAAAA,SAAS,EAAE,CAP0B;AAQrCE,EAAAA,KAAK,EAAC;AAR+B,CAAD,CAAjC;AAWP,MAAMQ,aAAa,GAAG;AAClBZ,EAAAA,UAAU,EAAE,KADM;AAElBvB,EAAAA,SAAS,EAAE,EAFO;AAGlByB,EAAAA,SAAS,EAAE,CAHO;AAIlBE,EAAAA,KAAK,EAAC;AAJY,CAAtB;AAOA,OAAO,MAAMS,YAAY,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AACxC,QAAM,CAAC;AAACd,IAAAA,UAAD;AAAcI,IAAAA;AAAd,GAAD,EAAuBW,QAAvB,IAAmCxC,UAAU,CAACkB,WAAD,EAAcmB,aAAd,CAAnD,CADwC,CAGxC;;AACA,QAAM,CAACnC,SAAD,EAAYuC,YAAZ,IAA4B3C,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAAC6B,SAAD,EAAYe,YAAZ,IAA4B5C,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAAC6C,SAAD,EAAYC,YAAZ,IAA4B9C,QAAQ,CAAC,CAAD,CAA1C;;AAEA,QAAMmC,aAAa,GAAG,MAAM;AACxBO,IAAAA,QAAQ,CAAC;AAACnB,MAAAA,IAAI,EAAEN,iBAAiB,CAACC,WAAzB;AAAsCM,MAAAA,OAAO,EAAE,CAACG;AAAhD,KAAD,CAAR;AACH,GAFD;;AAIA,QAAMoB,eAAe,GAAInB,YAAD,IAAkB;AACtC,UAAME,YAAY,GAAG1B,SAAS,CAAC4C,MAAV,CAAiB,CAACjB,KAAD,EAAQvB,QAAR,KAAqBuB,KAAK,GAAGvB,QAAQ,CAACG,QAAvD,EAAgE,CAAhE,CAArB;AACA,UAAMqB,YAAY,GAAG5B,SAAS,CAAC4C,MAAV,CAAiB,CAACjB,KAAD,EAAQvB,QAAR,KAAqBuB,KAAK,GAAGvB,QAAQ,CAACG,QAAT,GAAoBH,QAAQ,CAACyC,KAA3E,EAAkF,CAAlF,CAArB;AACA,UAAMzB,OAAO,GAAG;AACZI,MAAAA,YADY;AAEZE,MAAAA,YAFY;AAGZE,MAAAA;AAHY,KAAhB;AAKAU,IAAAA,QAAQ,CAAC;AACLnB,MAAAA,IAAI,EAAGN,iBAAiB,CAACE,cADpB;AAELK,MAAAA,OAAO,EAAEA;AAFJ,KAAD,CAAR;AAIH,GAZD,CAZwC,CA0BxC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,QAAMY,aAAa,GAAI/B,YAAD,IAAkB;AACpC0C,IAAAA,eAAe,CAAC5C,WAAW,CAACC,SAAD,EAAYC,YAAZ,CAAZ,CAAf;AACH,GAFD;;AAIA,QAAMgC,kBAAkB,GAAIxB,gBAAD,IAAsB;AAC7CkC,IAAAA,eAAe,CAACnC,cAAc,CAACR,SAAD,EAAYS,gBAAZ,CAAf,CAAf;AACH,GAFD;;AAIA,QAAMyB,iBAAiB,GAAItB,eAAD,IAAqB;AAC3C+B,IAAAA,eAAe,CAAChC,aAAa,CAACX,SAAD,EAAYY,eAAZ,CAAd,CAAf;AACH,GAFD;;AAIA,QAAMkC,KAAK,GAAG;AAACvB,IAAAA,UAAD;AAAaQ,IAAAA,aAAb;AAA4BC,IAAAA,aAA5B;AAA2ChC,IAAAA,SAA3C;AAAsDyB,IAAAA,SAAtD;AAAiEQ,IAAAA,kBAAjE;AAAqFC,IAAAA,iBAArF;AAAwGO,IAAAA;AAAxG,GAAd;AAEA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEK,KAA7B;AAAA,cAAqCT;AAArC;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAnDM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import {createContext, useState, useEffect, useReducer} from 'react'\n\nconst addCartItem = (cartItems, productToAdd) => {\n    const existingCartItem = cartItems.find((cartItem)=> cartItem.id === productToAdd.id)\n\n    if(existingCartItem) {\n        return cartItems.map((cartItem)=> cartItem.id === productToAdd.id ?\n            {...cartItem, quantity: cartItem.quantity + 1}\n            : cartItem\n        )\n    }\n\n    return [...cartItems, {...productToAdd, quantity: 1}]\n}\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n    const existingCartItem = cartItems.find((cartItem)=> cartItem.id === cartItemToRemove.id)\n\n    if(existingCartItem.quantity === 1){\n        return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id)\n    }\n\n    return cartItems.map((cartItem) => \n        cartItem.id === cartItemToRemove.id ?\n        {...cartItem, quantity: cartItem.quantity - 1}\n        : cartItem\n    )\n}\n\nconst clearCartItem = (cartItems, cartItemToClear) => cartItems.filter(cartItem => cartItem.id !== cartItemToClear.id)\n\nconst CART_ACTION_TYPES = {\n    TOGGLE_CART: 'TOGGLE_CART',\n    SET_CART_ITEMS: 'SET_CART_ITEMS',\n}\n\nconst cartReducer = (state, action) => {\n    const {type, payload} = action\n    console.log(action)\n    switch(type) {\n        case 'TOGGLE_CART':\n            return {\n                ...state, isCartOpen: payload\n            }\n        case 'SET_CART_ITEMS':\n            return {\n                ...state,\n                cartItems: payload.newCartItems,\n                cartCount:  payload.newCartCount,\n                total: payload.newCartTotal\n            }\n        default:\n            throw new Error(`Unhandled type ${type} in cartReducer`)\n    }\n}\n\nexport const CartContext = createContext({\n    isCartOpen: false,\n    setIsCartOpen: () => {},\n    cartItems: [],\n    addItemToCart: () => {},\n    removeItemFromCart: () => {},\n    clearItemFromCart: () => {},\n    cartCount: 0,\n    total:0\n})\n\nconst INITIAL_STATE = {\n    isCartOpen: false,\n    cartItems: [],\n    cartCount: 0,\n    total:0\n}\n\nexport const CartProvider = ({children}) => {\n    const [{isCartOpen,  total}, dispatch] = useReducer(cartReducer, INITIAL_STATE)\n\n    // const [isCartOpen, setIsCartOpen] = useState(false)\n    const [cartItems, setCartItems] = useState([])\n    const [cartCount, setCartCount] = useState(0)\n    const [cartTotal, setCartTotal] = useState(0)\n\n    const setIsCartOpen = () => {\n        dispatch({type: CART_ACTION_TYPES.TOGGLE_CART, payload: !isCartOpen})\n    }\n\n    const updateCartItems = (newCartItems) => {\n        const newCartCount = cartItems.reduce((total, cartItem) => total + cartItem.quantity,0)\n        const newCartTotal = cartItems.reduce((total, cartItem) => total + cartItem.quantity * cartItem.price, 0)\n        const payload = {\n            newCartItems,\n            newCartCount,\n            newCartTotal\n        }\n        dispatch({\n            type:  CART_ACTION_TYPES.SET_CART_ITEMS, \n            payload: payload\n        })\n    }\n\n    // useEffect(() => {\n    //   const newCartCount = cartItems.reduce((total, cartItem) => total + cartItem.quantity,0)\n    //   setCartCount(newCartCount)\n    // }, [cartItems])\n    \n    // useEffect(() => {\n    //     const newCartTotal = cartItems.reduce((total, cartItem) => total + cartItem.quantity * cartItem.price, 0)\n    //     setCartTotal(newCartTotal)\n    //   }, [cartItems])\n\n    const addItemToCart = (productToAdd) => {\n        updateCartItems(addCartItem(cartItems, productToAdd))\n    }\n\n    const removeItemFromCart = (cartItemToRemove) => {\n        updateCartItems(removeCartItem(cartItems, cartItemToRemove))\n    }\n\n    const clearItemFromCart = (cartItemToClear) => {\n        updateCartItems(clearCartItem(cartItems, cartItemToClear))\n    }\n\n    const value = {isCartOpen, setIsCartOpen, addItemToCart, cartItems, cartCount, removeItemFromCart, clearItemFromCart, cartTotal}\n\n    return <CartContext.Provider value={value}>{children}</CartContext.Provider>\n}"]},"metadata":{},"sourceType":"module"}