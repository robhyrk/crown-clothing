{"ast":null,"code":"var _jsxFileName = \"/Users/robhyrk/Documents/dev/courses/crwn-clothing-v2/src/context/cart.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst addCartItem = (cartItems, productToAdd) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === productToAdd.id);\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === productToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  }\n\n  return [...cartItems, { ...productToAdd,\n    quantity: 1\n  }];\n};\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id);\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  }\n\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n};\n\nconst clearCartItem = (cartItems, cartItemToClear) => cartItems.filter(cartItem => cartItem.id !== cartItemToClear.id);\n\nconst CART_ACTION_TYPES = {\n  TOGGLE_CART: 'TOGGLE_CART',\n  SET_CART_ITEMS: 'SET_CART_ITEMS'\n};\n\nconst cartReducer = (state, action) => {\n  const {\n    type,\n    payload\n  } = action;\n  console.log(action);\n\n  switch (type) {\n    case 'TOGGLE_CART':\n      return { ...state,\n        isCartOpen: payload\n      };\n\n    case 'SET_CART_ITEMS':\n      return { ...state,\n        ...payload\n      };\n\n    default:\n      throw new Error(`Unhandled type ${type} in cartReducer`);\n  }\n};\n\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  addItemToCart: () => {},\n  removeItemFromCart: () => {},\n  clearItemFromCart: () => {},\n  cartCount: 0,\n  total: 0\n});\nconst INITIAL_STATE = {\n  isCartOpen: false,\n  cartItems: [],\n  cartCount: 0,\n  cartTotal: 0\n};\nexport const CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [{\n    cartItems,\n    isCartOpen,\n    cartCount,\n    cartTotal\n  }, dispatch] = useReducer(cartReducer, INITIAL_STATE);\n\n  const setIsCartOpen = bool => {\n    console.log(bool);\n    dispatch({\n      type: CART_ACTION_TYPES.TOGGLE_CART,\n      payload: bool\n    });\n  };\n\n  const updateCartItems = newCartItems => {\n    const newCartCount = newCartItems.reduce((total, cartItem) => total + cartItem.quantity, 0);\n    const newCartTotal = newCartItems.reduce((total, cartItem) => total + cartItem.quantity * cartItem.price, 0);\n    const payload = {\n      cartItems: newCartItems,\n      cartCount: newCartCount,\n      cartTotal: newCartTotal\n    };\n    dispatch({\n      type: CART_ACTION_TYPES.SET_CART_ITEMS,\n      payload: payload\n    });\n  };\n\n  const addItemToCart = productToAdd => {\n    updateCartItems(addCartItem(cartItems, productToAdd));\n  };\n\n  const removeItemFromCart = cartItemToRemove => {\n    updateCartItems(removeCartItem(cartItems, cartItemToRemove));\n  };\n\n  const clearItemFromCart = cartItemToClear => {\n    updateCartItems(clearCartItem(cartItems, cartItemToClear));\n  };\n\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    addItemToCart,\n    cartItems,\n    cartCount,\n    removeItemFromCart,\n    clearItemFromCart,\n    cartTotal\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CartProvider, \"EGv6AoaxIWp+tv70Qk7eZZaabDs=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/robhyrk/Documents/dev/courses/crwn-clothing-v2/src/context/cart.context.jsx"],"names":["createContext","useReducer","addCartItem","cartItems","productToAdd","existingCartItem","find","cartItem","id","map","quantity","removeCartItem","cartItemToRemove","filter","clearCartItem","cartItemToClear","CART_ACTION_TYPES","TOGGLE_CART","SET_CART_ITEMS","cartReducer","state","action","type","payload","console","log","isCartOpen","Error","CartContext","setIsCartOpen","addItemToCart","removeItemFromCart","clearItemFromCart","cartCount","total","INITIAL_STATE","cartTotal","CartProvider","children","dispatch","bool","updateCartItems","newCartItems","newCartCount","reduce","newCartTotal","price","value"],"mappings":"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","sourcesContent":["import {createContext, useReducer} from 'react'\n\nconst addCartItem = (cartItems, productToAdd) => {\n    const existingCartItem = cartItems.find((cartItem)=> cartItem.id === productToAdd.id)\n\n    if(existingCartItem) {\n        return cartItems.map((cartItem)=> cartItem.id === productToAdd.id ?\n            {...cartItem, quantity: cartItem.quantity + 1}\n            : cartItem\n        )\n    }\n\n    return [...cartItems, {...productToAdd, quantity: 1}]\n}\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n    const existingCartItem = cartItems.find((cartItem)=> cartItem.id === cartItemToRemove.id)\n\n    if(existingCartItem.quantity === 1){\n        return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id)\n    }\n\n    return cartItems.map((cartItem) => \n        cartItem.id === cartItemToRemove.id ?\n        {...cartItem, quantity: cartItem.quantity - 1}\n        : cartItem\n    )\n}\n\nconst clearCartItem = (cartItems, cartItemToClear) => cartItems.filter(cartItem => cartItem.id !== cartItemToClear.id)\n\nconst CART_ACTION_TYPES = {\n    TOGGLE_CART: 'TOGGLE_CART',\n    SET_CART_ITEMS: 'SET_CART_ITEMS',\n}\n\nconst cartReducer = (state, action) => {\n    const {type, payload} = action\n    console.log(action)\n    switch(type) {\n        case 'TOGGLE_CART':\n            return {\n                ...state, isCartOpen: payload\n            }\n        case 'SET_CART_ITEMS':\n            return {\n                ...state,\n                ...payload\n            }\n        default:\n            throw new Error(`Unhandled type ${type} in cartReducer`)\n    }\n}\n\nexport const CartContext = createContext({\n    isCartOpen: false,\n    setIsCartOpen: () => {},\n    cartItems: [],\n    addItemToCart: () => {},\n    removeItemFromCart: () => {},\n    clearItemFromCart: () => {},\n    cartCount: 0,\n    total:0\n})\n\nconst INITIAL_STATE = {\n    isCartOpen: false,\n    cartItems: [],\n    cartCount: 0,\n    cartTotal:0\n}\n\nexport const CartProvider = ({children}) => {\n    const [{cartItems, isCartOpen,  cartCount, cartTotal}, dispatch] = useReducer(cartReducer, INITIAL_STATE)\n\n    const setIsCartOpen = (bool) => {\n        console.log(bool)\n        dispatch({type: CART_ACTION_TYPES.TOGGLE_CART, payload: bool})\n    }\n\n    const updateCartItems = (newCartItems) => {\n        const newCartCount = newCartItems.reduce((total, cartItem) => total + cartItem.quantity,0)\n        const newCartTotal = newCartItems.reduce((total, cartItem) => total + cartItem.quantity * cartItem.price, 0)\n        const payload = {\n            cartItems: newCartItems,\n            cartCount: newCartCount,\n            cartTotal: newCartTotal\n        }\n        dispatch({\n            type:  CART_ACTION_TYPES.SET_CART_ITEMS, \n            payload: payload\n        })\n    }\n\n    const addItemToCart = (productToAdd) => {\n        updateCartItems(addCartItem(cartItems, productToAdd))\n    }\n\n    const removeItemFromCart = (cartItemToRemove) => {\n        updateCartItems(removeCartItem(cartItems, cartItemToRemove))\n    }\n\n    const clearItemFromCart = (cartItemToClear) => {\n        updateCartItems(clearCartItem(cartItems, cartItemToClear))\n    }\n\n    const value = {isCartOpen, setIsCartOpen, addItemToCart, cartItems, cartCount, removeItemFromCart, clearItemFromCart, cartTotal}\n\n    return <CartContext.Provider value={value}>{children}</CartContext.Provider>\n}"]},"metadata":{},"sourceType":"module"}