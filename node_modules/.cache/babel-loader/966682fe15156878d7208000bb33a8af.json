{"ast":null,"code":"var _jsxFileName = \"/Users/robhyrk/Documents/dev/courses/crwn-clothing-v2/src/context/cart.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst addCartItem = (cartItems, productToAdd) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === productToAdd.id);\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === productToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  }\n\n  return [...cartItems, { ...productToAdd,\n    quantity: 1\n  }];\n};\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id);\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  }\n\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n};\n\nconst clearCartItem = (cartItems, cartItemToClear) => cartItems.filter(cartItem => cartItem.id !== cartItemToClear.id);\n\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  addItemToCart: () => {},\n  removeItemFromCart: () => {},\n  clearItemFromCart: () => {},\n  cartCount: 0\n});\nexport const CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([]);\n  const [cartCount, setCartCount] = useState(0);\n  useEffect(() => {\n    const newCartCount = cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0);\n    setCartCount(newCartCount);\n  }, [cartItems]);\n\n  const addItemToCart = productToAdd => {\n    setCartItems(addCartItem(cartItems, productToAdd));\n  };\n\n  const removeItemFromCart = cartItemToRemove => {\n    setCartItems(removeCartItem(cartItems, cartItemToRemove));\n  };\n\n  const clearItemFromCart = cartItemToClear => {\n    setCartItems(clearCartItem(cartItems, cartItemToClear));\n  };\n\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    addItemToCart,\n    cartItems,\n    cartCount,\n    removeItemFromCart,\n    clearItemFromCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CartProvider, \"1STVRVZJMMTq6OZavO9o7qwZdno=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/robhyrk/Documents/dev/courses/crwn-clothing-v2/src/context/cart.context.jsx"],"names":["createContext","useState","useEffect","addCartItem","cartItems","productToAdd","existingCartItem","find","cartItem","id","map","quantity","removeCartItem","cartItemToRemove","filter","clearCartItem","cartItemToClear","CartContext","isCartOpen","setIsCartOpen","addItemToCart","removeItemFromCart","clearItemFromCart","cartCount","CartProvider","children","setCartItems","setCartCount","newCartCount","reduce","total","value"],"mappings":"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","sourcesContent":["import {createContext, useState, useEffect} from 'react'\n\nconst addCartItem = (cartItems, productToAdd) => {\n    const existingCartItem = cartItems.find((cartItem)=> cartItem.id === productToAdd.id)\n\n    if(existingCartItem) {\n        return cartItems.map((cartItem)=> cartItem.id === productToAdd.id ?\n            {...cartItem, quantity: cartItem.quantity + 1}\n            : cartItem\n        )\n    }\n\n    return [...cartItems, {...productToAdd, quantity: 1}]\n}\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n    const existingCartItem = cartItems.find((cartItem)=> cartItem.id === cartItemToRemove.id)\n\n    if(existingCartItem.quantity === 1){\n        return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id)\n    }\n\n    return cartItems.map((cartItem) => \n        cartItem.id === cartItemToRemove.id ?\n        {...cartItem, quantity: cartItem.quantity - 1}\n        : cartItem\n    )\n}\n\nconst clearCartItem = (cartItems, cartItemToClear) => cartItems.filter(cartItem => cartItem.id !== cartItemToClear.id)\n\nexport const CartContext = createContext({\n    isCartOpen: false,\n    setIsCartOpen: () => {},\n    cartItems: [],\n    addItemToCart: () => {},\n    removeItemFromCart: () => {},\n    clearItemFromCart: () => {},\n    cartCount: 0\n})\n\nexport const CartProvider = ({children}) => {\n    const [isCartOpen, setIsCartOpen] = useState(false)\n    const [cartItems, setCartItems] = useState([])\n    const [cartCount, setCartCount] = useState(0)\n\n    useEffect(() => {\n      const newCartCount = cartItems.reduce((total, cartItem) => total + cartItem.quantity,0)\n      setCartCount(newCartCount)\n    }, [cartItems])\n    \n\n    const addItemToCart = (productToAdd) => {\n        setCartItems(addCartItem(cartItems, productToAdd))\n    }\n\n    const removeItemFromCart = (cartItemToRemove) => {\n        setCartItems(removeCartItem(cartItems, cartItemToRemove))\n    }\n\n    const clearItemFromCart = (cartItemToClear) => {\n        setCartItems(clearCartItem(cartItems, cartItemToClear))\n    }\n\n    const value = {isCartOpen, setIsCartOpen, addItemToCart, cartItems, cartCount, removeItemFromCart, clearItemFromCart}\n\n    return <CartContext.Provider value={value}>{children}</CartContext.Provider>\n}"]},"metadata":{},"sourceType":"module"}