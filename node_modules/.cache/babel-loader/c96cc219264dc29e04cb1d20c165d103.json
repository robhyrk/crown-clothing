{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore'; // Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBj-Yk5H75xAURMlGcb9un9L17hE6kja4Y\",\n  authDomain: \"crown-2f584.firebaseapp.com\",\n  projectId: \"crown-2f584\",\n  storageBucket: \"crown-2f584.appspot.com\",\n  messagingSenderId: \"541524286340\",\n  appId: \"1:541524286340:web:1f46fc017e33dede119bd1\"\n}; // Initialize Firebase\n\nconst firebaseApp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  const userSnapShot = await getDoc(userDocRef);\n\n  if (!userSnapShot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInfo\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => signOut(auth);\nexport const onAuthStateChangedListener = callback => {\n  onAuthStateChanged(auth, callback);\n};","map":{"version":3,"sources":["/Users/robhyrk/Documents/dev/crwn-clothing-v2/src/utils/firebase/firebase.utils.jsx"],"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","additionalInfo","userDocRef","uid","userSnapShot","exists","displayName","email","createdAt","Date","err","console","log","createAuthUserWithEmailAndPassword","password","signInUserWithEmailAndPassword","signOutUser","onAuthStateChangedListener","callback"],"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,cAA9B;AACA,SACIC,OADJ,EAEIC,kBAFJ,EAGIC,eAHJ,EAIIC,kBAJJ,EAKIC,8BALJ,EAMIC,0BANJ,EAOIC,OAPJ,EAQIC,kBARJ,QASO,eATP;AAUA,SAAQC,YAAR,EAAsBC,GAAtB,EAA2BC,MAA3B,EAAmCC,MAAnC,QAAgD,oBAAhD,C,CAEA;;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,6BAFS;AAGrBC,EAAAA,SAAS,EAAE,aAHU;AAIrBC,EAAAA,aAAa,EAAE,yBAJM;AAKrBC,EAAAA,iBAAiB,EAAE,cALE;AAMrBC,EAAAA,KAAK,EAAE;AANc,CAAvB,C,CASA;;AACA,MAAMC,WAAW,GAAGpB,aAAa,CAACa,cAAD,CAAjC;AAEA,MAAMQ,cAAc,GAAG,IAAIjB,kBAAJ,EAAvB;AACAiB,cAAc,CAACC,mBAAf,CAAmC;AAC/BC,EAAAA,MAAM,EAAE;AADuB,CAAnC;AAIA,OAAO,MAAMC,IAAI,GAAGvB,OAAO,EAApB;AACP,OAAO,MAAMwB,qBAAqB,GAAG,MAAMtB,eAAe,CAACqB,IAAD,EAAOH,cAAP,CAAnD;AACP,OAAO,MAAOK,wBAAwB,GAAG,MAAMxB,kBAAkB,CAACsB,IAAD,EAAOH,cAAP,CAA1D;AAEP,OAAO,MAAMM,EAAE,GAAGlB,YAAY,EAAvB;AAEP,OAAO,MAAMmB,0BAA0B,GAAG,gBAAOC,QAAP,EAAyC;AAAA,MAAxBC,cAAwB,uEAAP,EAAO;AAC/E,QAAMC,UAAU,GAAGrB,GAAG,CAACiB,EAAD,EAAK,OAAL,EAAcE,QAAQ,CAACG,GAAvB,CAAtB;AACA,QAAMC,YAAY,GAAG,MAAMtB,MAAM,CAACoB,UAAD,CAAjC;;AAEA,MAAG,CAACE,YAAY,CAACC,MAAb,EAAJ,EAA0B;AACtB,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAuBP,QAA7B;AACA,UAAMQ,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACA,YAAM1B,MAAM,CAACmB,UAAD,EAAa;AACrBI,QAAAA,WADqB;AAErBC,QAAAA,KAFqB;AAGrBC,QAAAA,SAHqB;AAIrB,WAAGP;AAJkB,OAAb,CAAZ;AAMH,KAPD,CAOE,OAAMS,GAAN,EAAW;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AACJ;;AAED,SAAOR,UAAP;AACH,CApBM;AAsBP,OAAO,MAAMW,kCAAkC,GAAG,OAAON,KAAP,EAAcO,QAAd,KAA2B;AACzE,MAAI,CAACP,KAAD,IAAU,CAACO,QAAf,EAAyB;AACzB,SAAO,MAAMtC,8BAA8B,CAACmB,IAAD,EAAOY,KAAP,EAAcO,QAAd,CAA3C;AACH,CAHM;AAKP,OAAO,MAAMC,8BAA8B,GAAG,OAAOR,KAAP,EAAcO,QAAd,KAA2B;AACrE,MAAI,CAACP,KAAD,IAAU,CAACO,QAAf,EAAyB;AACzB,SAAO,MAAMrC,0BAA0B,CAACkB,IAAD,EAAOY,KAAP,EAAcO,QAAd,CAAvC;AACH,CAHM;AAKP,OAAO,MAAME,WAAW,GAAG,YAAYtC,OAAO,CAACiB,IAAD,CAAvC;AAEP,OAAO,MAAMsB,0BAA0B,GAAIC,QAAD,IAAc;AACpDvC,EAAAA,kBAAkB,CAACgB,IAAD,EAAOuB,QAAP,CAAlB;AACH,CAFM","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { \n    getAuth, \n    signInWithRedirect, \n    signInWithPopup, \n    GoogleAuthProvider, \n    createUserWithEmailAndPassword, \n    signInWithEmailAndPassword, \n    signOut,\n    onAuthStateChanged\n} from 'firebase/auth'\nimport {getFirestore, doc, getDoc, setDoc} from 'firebase/firestore'\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBj-Yk5H75xAURMlGcb9un9L17hE6kja4Y\",\n  authDomain: \"crown-2f584.firebaseapp.com\",\n  projectId: \"crown-2f584\",\n  storageBucket: \"crown-2f584.appspot.com\",\n  messagingSenderId: \"541524286340\",\n  appId: \"1:541524286340:web:1f46fc017e33dede119bd1\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst googleProvider = new GoogleAuthProvider()\ngoogleProvider.setCustomParameters({\n    prompt: \"select_account\"\n})\n\nexport const auth = getAuth()\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider)\nexport const  signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider)\n\nexport const db = getFirestore()\n\nexport const createUserDocumentFromAuth = async (userAuth, additionalInfo = {}) => {\n    const userDocRef = doc(db, 'users', userAuth.uid)\n    const userSnapShot = await getDoc(userDocRef)\n    \n    if(!userSnapShot.exists()){\n        const {displayName, email} = userAuth\n        const createdAt = new Date()\n        try {\n            await setDoc(userDocRef, {\n                displayName,\n                email, \n                createdAt,\n                ...additionalInfo\n            })\n        } catch(err) {\n            console.log(err)\n        }\n    }\n\n    return userDocRef\n}\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n    if (!email || !password) return\n    return await createUserWithEmailAndPassword(auth, email, password)\n}\n\nexport const signInUserWithEmailAndPassword = async (email, password) => {\n    if (!email || !password) return\n    return await signInWithEmailAndPassword(auth, email, password)\n}\n\nexport const signOutUser = async () => signOut(auth)\n\nexport const onAuthStateChangedListener = (callback) => {\n    onAuthStateChanged(auth, callback)\n}\n"]},"metadata":{},"sourceType":"module"}