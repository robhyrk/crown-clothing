{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc, collection, writeBatch, query, getDocs } from 'firebase/firestore'; // Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBj-Yk5H75xAURMlGcb9un9L17hE6kja4Y\",\n  authDomain: \"crown-2f584.firebaseapp.com\",\n  projectId: \"crown-2f584\",\n  storageBucket: \"crown-2f584.appspot.com\",\n  messagingSenderId: \"541524286340\",\n  appId: \"1:541524286340:web:1f46fc017e33dede119bd1\"\n}; // Initialize Firebase\n\nconst firebaseApp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\nexport const db = getFirestore();\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = collection(db, collectionKey);\n  const batch = writeBatch(db);\n  objectsToAdd.forEach(obj => {\n    const docRef = doc(collectionRef, obj.title.toLowerCase());\n    batch.set(docRef, obj);\n  });\n  await batch.commit();\n  console.log(\"done\");\n};\nexport const getCategoriesAndDocuments = async () => {\n  const collectionRef = collection(db, 'categories');\n  const q = query(collectionRef);\n  const querySnapshot = await getDocs(q);\n  return querySnapshot.docs.map(docSnapshot => docSnapshot.data()); // const categoryMap = querySnapshot.docs.reduce((acc, docSnapshot)=>{\n  //     const {title, items} = docSnapshot.data()\n  //     acc[title.toLowerCase()] = items\n  //     return acc\n  // }, {})\n  // return categoryMap\n};\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  const userSnapShot = await getDoc(userDocRef);\n\n  if (!userSnapShot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInfo\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => signOut(auth);\nexport const onAuthStateChangedListener = callback => {\n  onAuthStateChanged(auth, callback);\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = onAuthStateChanged(auth, userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};","map":{"version":3,"sources":["/Users/robhyrk/Documents/dev/courses/crwn-clothing-v2/src/utils/firebase/firebase.utils.jsx"],"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","getDoc","setDoc","collection","writeBatch","query","getDocs","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","obj","docRef","title","toLowerCase","set","commit","console","log","getCategoriesAndDocuments","q","querySnapshot","docs","map","docSnapshot","data","createUserDocumentFromAuth","userAuth","additionalInfo","userDocRef","uid","userSnapShot","exists","displayName","email","createdAt","Date","err","createAuthUserWithEmailAndPassword","password","signInUserWithEmailAndPassword","signOutUser","onAuthStateChangedListener","callback","getCurrentUser","Promise","resolve","reject","unsubscribe"],"mappings":"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","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { \n    getAuth, \n    signInWithRedirect, \n    signInWithPopup, \n    GoogleAuthProvider, \n    createUserWithEmailAndPassword, \n    signInWithEmailAndPassword, \n    signOut,\n    onAuthStateChanged\n} \nfrom 'firebase/auth'\n\nimport {\n    getFirestore, \n    doc, \n    getDoc, \n    setDoc, \n    collection, \n    writeBatch, \n    query, \n    getDocs} \nfrom 'firebase/firestore'\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBj-Yk5H75xAURMlGcb9un9L17hE6kja4Y\",\n  authDomain: \"crown-2f584.firebaseapp.com\",\n  projectId: \"crown-2f584\",\n  storageBucket: \"crown-2f584.appspot.com\",\n  messagingSenderId: \"541524286340\",\n  appId: \"1:541524286340:web:1f46fc017e33dede119bd1\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst googleProvider = new GoogleAuthProvider()\ngoogleProvider.setCustomParameters({\n    prompt: \"select_account\"\n})\n\nexport const auth = getAuth()\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider)\nexport const  signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider)\n\nexport const db = getFirestore()\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n    const collectionRef = collection(db, collectionKey)\n    const batch = writeBatch(db)\n\n    objectsToAdd.forEach((obj)=>{\n        const docRef = doc(collectionRef, obj.title.toLowerCase())\n        batch.set(docRef, obj)\n    })\n\n    await batch.commit()\n    console.log(\"done\")\n}\n\nexport const getCategoriesAndDocuments = async () => {\n    const collectionRef = collection(db, 'categories')\n    const q = query(collectionRef)\n\n    const querySnapshot = await getDocs(q)\n    return querySnapshot.docs.map(docSnapshot => docSnapshot.data())\n    // const categoryMap = querySnapshot.docs.reduce((acc, docSnapshot)=>{\n    //     const {title, items} = docSnapshot.data()\n    //     acc[title.toLowerCase()] = items\n    //     return acc\n    // }, {})\n    // return categoryMap\n}\n\nexport const createUserDocumentFromAuth = async (userAuth, additionalInfo = {}) => {\n    const userDocRef = doc(db, 'users', userAuth.uid)\n    const userSnapShot = await getDoc(userDocRef)\n    \n    if(!userSnapShot.exists()){\n        const {displayName, email} = userAuth\n        const createdAt = new Date()\n        try {\n            await setDoc(userDocRef, {\n                displayName,\n                email, \n                createdAt,\n                ...additionalInfo\n            })\n        } catch(err) {\n            console.log(err)\n        }\n    }\n\n    return userDocRef\n}\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n    if (!email || !password) return\n    return await createUserWithEmailAndPassword(auth, email, password)\n}\n\nexport const signInUserWithEmailAndPassword = async (email, password) => {\n    if (!email || !password) return\n    return await signInWithEmailAndPassword(auth, email, password)\n}\n\nexport const signOutUser = async () => signOut(auth)\n\nexport const onAuthStateChangedListener = (callback) => {\n    onAuthStateChanged(auth, callback)\n}\n\nexport const getCurrentUser = () => {\n    return new Promise((resolve, reject) => {\n        const unsubscribe = onAuthStateChanged(\n            auth,\n            (userAuth) => {\n                unsubscribe()\n                resolve(userAuth)\n            },\n            reject\n        )\n    })\n}"]},"metadata":{},"sourceType":"module"}